"use strict";
function _defineProperty(e, o, t) {
    return o in e ? Object.defineProperty(e, o, {
        value: t,
        enumerable: !0,
        configurable: !0,
        writable: !0
    }) : e[o] = t,
    e
}
var firebaseConfig = {
    apiKey: "AIzaSyA-o3EXpQwwrT585Yp74_xd3TlPfaNHhEg",
    authDomain: "resultadofacil-4473f.firebaseapp.com",
    projectId: "resultadofacil-4473f",
    storageBucket: "resultadofacil-4473f.appspot.com",
    messagingSenderId: "565380276796",
    appId: "1:565380276796:web:41df8844d52d44b720d939",
    measurementId: "G-C1EW8FTLXT"
}
  , gacint = !1;
function refreshPerfil() {
    var e = 0 < arguments.length && void 0 !== arguments[0] ? arguments[0] : "usuário"
      , o = 1 < arguments.length && void 0 !== arguments[1] ? arguments[1] : "/images/users/anonymous30x30.jpeg"
      , t = e && 0 < e.split(" ").length ? e.split(" ")[0] : "";
    document.querySelector("#menu-perfil .first-name").textContent = t || "usuário",
    document.querySelector("#navitem-perfil img").src = o || "/images/users/anonymous30x30.jpeg"
}
function setUserAnonymous() {
    refreshPerfil(),
    $("#btn_logout").addClass("hidden"),
    $("#btn_login").removeClass("hidden"),
    showDivLock()
}
function getUserLocalstorage() {
    if (null == localStorage.getItem("user_resultadofacil.com.br"))
        return null;
    var e = JSON.parse(localStorage.getItem("user_resultadofacil.com.br"));
    return e.exp < (new Date).getTime() ? firebase.auth().currentUser : e
}
function showOnetap() {
    initializeAccount(),
    google.accounts.id.prompt()
}
function initializeAccount() {
    gacint || (console.debug("inicializando google.account"),
    google.accounts.id.initialize({
        client_id: "565380276796-5ocp401d96ajnkvgjpfc42pegal030pe.apps.googleusercontent.com",
        callback: handleCredentialResponse,
        use_fedcm_for_prompt: !0
    }),
    gacint = !0)
}
function handleCredentialResponse(e) {
    console.debug("Gerando credencial do google");
    var o = e.credential
      , t = (new firebase.auth.GoogleAuthProvider).credential(o);
    firebase.auth().signInWithCredential(t).then(function(e) {
        var o = e.user;
        setUserInfor(o),
        Swal.fire({
            icon: "success",
            title: "Logado com sucesso!",
            showConfirmButton: !1,
            timer: 1500
        }),
        "function" == typeof get_ && get_(o)
    }).catch(function(e) {
        Swal.fire({
            icon: "error",
            title: "Ocorreu um erro ao se conectar",
            text: "Nossa equipe já está resolvendo, em breve você receberá um e-mail informando sobre o problema.",
            showConfirmButton: !1,
            timer: 1e4
        });
        var o = e.code
          , t = e.message;
        sendErr(e.email, "".concat(o, " - ").concat(t))
    })
}
function setUserInfor(e) {
    $("#btn_logout").removeClass("hidden"),
    $("#btn_login").addClass("hidden"),
    refreshPerfil(e.displayName, e.photoURL),
    hideDivLock()
}
function sendErr(e, o) {
    var t = new FormData;
    t.append("email", e),
    t.append("error", o);
    var n = new XMLHttpRequest
      , a = "".concat(window.location.origin, "/").concat(atob("cmVwb3J0LWVycm9yLWF1dGg="));
    n.open("POST", a, !0),
    n.send(t)
}
function setUserLocalstorage(t) {
    t.getIdToken().then(function(e) {
        var o = {
            displayName: t.displayName,
            photoURL: t.photoURL,
            tkn: e,
            exp: (new Date).getTime() + 36e5
        };
        try {
            localStorage.setItem("user_resultadofacil.com.br", JSON.stringify(o))
        } catch (e) {
            sendErr(t.email, message),
            console.error(e)
        }
    })
}
function signOut() {
    firebase.auth().signOut().then(function() {
        removeUserLocalstorage()
    }).catch(function(e) {
        console.error(e)
    })
}
function removeUserLocalstorage() {
    localStorage.removeItem("user_resultadofacil.com.br"),
    setUserAnonymous()
}
function buildSigninWithGoogle() {
    Swal.fire(_defineProperty({
        title: "<b>Conecte-se!</b>",
        html: '<p class="text-justify text-muted"">Para acessar o Resultado completo é necessário estar conectado. É muito simples e rápido, basta clicar no botão Fazer login e escolher sua conta:</p>'.concat('<div id="g_btn" style="display: inline-block;margin-top: 8px;"></div>'),
        width: "36em",
        imageUrl: "/images/user169x169.png",
        allowEscapeKey: !1,
        backdrop: !1,
        allowOutsideClick: !1,
        showCloseButton: !1,
        showCancelButton: !1,
        showConfirmButton: !1
    }, "showCloseButton", !0)),
    initializeAccount(),
    google.accounts.id.renderButton(document.getElementById("g_btn"), {
        type: "standard",
        locale: "pt_BR",
        size: "large"
    })
}
function hideDivLock() {
    $(".lock").hide()
}
function showDivLock() {
    $(".lock").show()
}
function onListenerAuthState() {
    firebase.auth().onAuthStateChanged(function(e) {
        if (e)
            console.debug("auth state: signed in"),
            setUserInfor(e),
            "function" == typeof get_ && get_(e);
        else {
            console.debug("auth state: signed out"),
            removeUserLocalstorage();
            var o = getCookie("silenceOneTap");
            "" == o && (o = 0),
            console.debug("One tap fechado ".concat(o, " vezes")),
            0 == o && showOnetap()
        }
    })
}
function storageAvailable() {
    var o, e = 0 < arguments.length && void 0 !== arguments[0] ? arguments[0] : "localStorage";
    try {
        o = window[e];
        var t = "__storage_test__";
        return o.setItem(t, t),
        o.removeItem(t),
        !0
    } catch (e) {
        return e instanceof DOMException && (22 === e.code || 1014 === e.code || "QuotaExceededError" === e.name || "NS_ERROR_DOM_QUOTA_REACHED" === e.name) && o && 0 !== o.length
    }
}
firebase.initializeApp(firebaseConfig),
location.hostname.startsWith("localhost") && firebase.auth().useEmulator("http://localhost:9099"),
document.getElementById("btn_logout").onclick = signOut,
document.getElementById("btn_login").onclick = buildSigninWithGoogle,
$(".lock .btn-dark").on("click", function() {
    buildSigninWithGoogle()
}),
onListenerAuthState();
"use strict";
if ("Notification"in window && "granted" === Notification.permission) {
    var saveToken = function(e) {
        var o = localStorage.fcmToken
          , n = o != e;
        if ("" != e) {
            n && (console.debug("token [" + o + "] <> token [" + e + "]"),
            console.debug("atualizando token ", o, " para ", e),
            localStorage.fcmToken = e);
            var t = localStorage.topics ? localStorage.topics.split(", ") : [];
            t.includes("OUTROS") || (t.push("OUTROS"),
            localStorage.topics = t.join(", ")),
            sendToServer(e, n ? o : "", localStorage.topics)
        }
    }
      , sendToServer = function(o, e, n) {
        if (2 != localStorage.topicsSycn) {
            "" == n.trim() && (n = "OUTROS");
            var t = "".concat(window.location.origin, "/").concat(atob("bWFuYWdlcnRvcGljcw=="))
              , a = {
                tfcm: o,
                topics: n,
                tfcmOld: e
            };
            if (self.fetch)
                fetch(t, {
                    method: "POST",
                    headers: {
                        Accept: "application/json",
                        "Content-Type": "application/json"
                    },
                    body: JSON.stringify(a)
                }).then(function(e) {
                    e && (e.ok ? (localStorage.topicsSycn = 2,
                    localStorage.fcmToken = o,
                    console.debug("token sincronizado")) : console.error("falha ao sincronizar token"))
                }).catch(function(e) {
                    console.error(e)
                });
            else {
                var i = new XMLHttpRequest;
                i.open("POST", t, !0),
                i.setRequestHeader("Content-type", "application/json"),
                i.onreadystatechange = function() {
                    4 == i.readyState && 200 == i.status ? (localStorage.topicsSycn = 2,
                    localStorage.fcmToken = o,
                    console.debug(a)) : console.error(a)
                }
                ,
                i.send(JSON.stringify(a))
            }
        } else
            console.debug("nothing")
    }
      , messaging = firebase.messaging();
    messaging.getToken().then(function(e) {
        e ? saveToken(e) : console.debug("No Instance ID token available. Request permission to generate one.")
    }).catch(function(e) {
        console.error("An error occurred while retrieving token. ", e)
    }),
    messaging.onTokenRefresh(function() {
        messaging.getToken().then(function(e) {
            e && (console.debug("Token refreshed: ", e),
            localStorage.topicsSycn = 0,
            saveToken(e))
        }).catch(function(e) {
            console.debug("Unable to retrieve refreshed token ", e)
        })
    }),
    $.fn.extend({
        fadeTo: function() {
            return this.each(function() {
                var e = this;
                if (0 == this.style.opacity) {
                    this.parentElement && this.parentElement.parentElement && (this.parentElement.parentElement.style.display = "block");
                    for (var o = 0; o < 3e3; o++)
                        this.style.opacity = o / 3e3;
                    var n = setTimeout(function() {
                        e.style.opacity = 0,
                        e.parentElement.parentElement.style.display = "none",
                        clearTimeout(n)
                    }, 1e4)
                }
            })
        }
    }),
    messaging.onMessage(function(e) {
        var o = e.notification.click_action;
        console.debug("Message received. ", e);
        var n = $("#inner-message");
        n && (n.html(e.notification.title + ', <a href="' + o + '" class="alert-link">clique para ver</a>'),
        n.fadeTo())
    })
}
